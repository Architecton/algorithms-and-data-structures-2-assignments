import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;


public class Naloga3 {

	public static void main(String[] args) {
		
		// Define variables for storing arguments.
		// traceLimit == -1 -> no trace limit
		String algorithmSpec = "";
		int traceLimit = -1;
		
		// Define supported algorithm specifiers
		String[] supportedAlgs = {"2c", "gr", "ex", "bt", "dp"};
		
		// Try to parse arguments and handle errors appropriately.
		try {
			algorithmSpec = args[0];
			if(args.length > 1) {
				try {
					try {
						if(!args[1].equals("-n")) {
							throw new IllegalArgumentException(args[1]);
						}
					} catch (IllegalArgumentException e) {
						System.err.printf("Unknown option %s\n", e.getMessage());
						e.printStackTrace();
						System.exit(1);
					}
					traceLimit = Integer.parseInt(args[2]);
				} catch(IndexOutOfBoundsException e) {
					System.err.println("Missing argument for -n option");
					e.printStackTrace();
					System.exit(1);
				}
			}
		} catch (IndexOutOfBoundsException e) {
			System.err.println("Missing algorithm specifier");
			e.printStackTrace();
			System.exit(1);
		}

		// Check if specified algorithm is valid and handle errors appropriately
		try {
			boolean validAlgorithm = false;
			for(String s : supportedAlgs) {
				if(algorithmSpec.equals(s)) {
					validAlgorithm = true;
				}
			}
			
			if(!validAlgorithm) {
				throw new IllegalArgumentException(algorithmSpec);
			}
			
		} catch (IllegalArgumentException e) {
			System.err.printf("Unrecognize algorithm specifier %s\n", e.getMessage());
			e.printStackTrace();
			System.exit(1);
		}
		
		// Construct graph
		Scanner sc = new Scanner(System.in);
		Graph graph = null;
		
		try {
			int numNodes = sc.nextInt();
			int numEdges = sc.nextInt();
			graph = new Graph(numNodes);
			
			// Parse and initialize edges
			for(int i = 0; i < numEdges; i++) {
				graph.addConnection(sc.nextInt(), sc.nextInt());
			}
			
		} catch (IndexOutOfBoundsException e) {
			System.err.println("Invalid edge descriptions");
			e.printStackTrace();
		}
		
		
		// Perform specified algorithm
		try {
			switch(algorithmSpec) {
			case "2c":
				graph.colour_2c(traceLimit);
				break;
			case "gr":
				graph.colour_gr(traceLimit);
				break;
			case "ex":
				graph.colour_ex(traceLimit);
				break;
			case "bt":
				graph.colour_bt(traceLimit);
				break;
			case "dp":
				graph.colour_dynamic(traceLimit);
				break;
			}
		} catch (NullPointerException e) {
			System.err.println("The graph has not been properly initialized.");
			sc.close();
			System.exit(1);
		} finally {
			sc.close();
		}
	}
}

// Graph: represents a graph
class Graph {
	private Node[] nodes;
	private int traceLimit;
	private int traceLineCounter;
	
	// constructor
	public Graph(int numNodes){
		this.traceLineCounter = 0;
		nodes = new Node[numNodes];
		// Initialize nodes with IDs from [0, numNode - 1].
		for (int i = 0; i < nodes.length; i++) {
			nodes[i] = new Node(i);
			// colour == -1 -> uncoloured
			nodes[i].setColour(-1);
		}
	}
	
	// AddConnection: Adds a connection between nodes specified by IDs fromNode and toNode
	public void addConnection(int id1, int id2){
		Edge e = new Edge(id1, id2);
		nodes[id1].addEdge(e);
		nodes[id2].addEdge(e);
	}
	
	// clear: remove all set colors from this graph (set signal value -1).
	public void clear() {
		for(Node node : this.nodes) {
			node.setColour(-1);
		}
	}
	
	/*
	 * BFS(s):
	 * 		mark s as visited and insert s into queue.  level(s)=0.
   	 * 		while (queue not empty):
     * 			v <- queue.remove()
     * 			for all unvisited neighbors w of v:
     * 				put edge (v,w) into BFS tree T
	 * 				mark w as visited, level(w)=level(v)+1
	 * 				queue.insert(w) 
	 */
	
	// colour_2c: Try to colour this graph using two colours (breadth first).
	// Returns true if this graph is colourable with two colours (bipartite)
	// and false otherwise.
	public boolean colour_2c(int traceLimit) {
		// Set maximum number of lines to trace
		if(traceLimit == -1) {
			this.traceLimit = 0;
		} else {
			this.traceLimit = traceLimit;
		}
		
		// Get starting node (0 by assumption)
		Node root = this.nodes[0]; // OK
		root.setColour(0);
		// Create a new instance of SimpleQeueue and enqueue the starting node.
		SimpleQueue<Node> queue = new SimpleQueue<Node>();
		queue.enqueue(root);
		// Try to colour the graph.
		boolean bipartite = colour_2c_aux(root, queue, traceLimit);
	
		// TRACE functionality ////////////////////////
		if(this.traceLineCounter >= this.traceLimit) {
			System.out.printf(bipartite ? "%nOK" : "%nNOK");
		} else {
            this.traceLineCounter++;
        }        
		///////////////////////////////////////////////
		
		return bipartite;
	}
	
	// colour_2c_aux: auxilliary private method for the colour_2c method.
	private boolean colour_2c_aux(Node root, SimpleQueue<Node> queue, int traceLimit) {
		// Assume it is bipartite.
		boolean bipartite = true;
		int currentSetIndex = -1;
		ArrayList<Integer> set = new ArrayList<Integer>();
		// While the queue is not empty...
		search: {
			while(!queue.isEmpty()) {
				Node next = queue.dequeue();
				
				// TRACE functionality ////////////////////////
				// If starting next set...
				if(this.traceLineCounter >= this.traceLimit) {
					if(next.setIndex != currentSetIndex) {
						// print set
						Collections.sort(set);
						for(int i = 0; i < set.size(); i++) {
							System.out.printf((i == set.size() - 1) ? "%d" : "%d ", set.get(i));
						}
						set.clear();
						
						System.out.printf((currentSetIndex == -1) ? "%d : " : "%n%d : " , next.setIndex);
						this.traceLineCounter++;
						currentSetIndex = next.setIndex;
						//System.out.printf("Adding %d\n", next.getId());
						set.add(next.getId());
						// System.out.printf("%d ", next.getId());
					} else {
						//System.out.printf("\nAdding %d\n", next.getId());
						set.add(next.getId());
						//System.out.printf("%d ", next.getId());
					}
				}
				/*if(this.traceLineCounter < this.traceLimit) {
					if(next.setIndex != currentSetIndex) {
						System.out.printf((currentSetIndex == -1) ? "%d : " : "%n%d : " , next.setIndex);
						this.traceLineCounter++;
						currentSetIndex = next.setIndex;
						System.out.printf("%d ", next.getId());
					} else {
						System.out.printf("%d ", next.getId());
					}
				}*/
				///////////////////////////////////////////////
				
				// go over neighbors
				for(Integer neighborId : next.getNeighborIds()) {
					// if neighbor same colour -> NOT BIPARTITE (end colouring)
					if(this.nodes[neighborId].getColour() == next.getColour()) {
						bipartite = false;
						
						// TRACE functionality /////////////////////////////////////////
						// Purge and print remaining nodes with current set index
						while(!queue.isEmpty()) {
							Node n = queue.dequeue();
							if(n.setIndex == currentSetIndex) {
								set.add(n.getId());
								//System.out.printf("%d ", n.getId());
							} else {
								break;
							}
						}
						
						Collections.sort(set);
						for(int i = 0; i < set.size(); i++) {
							System.out.printf((i == set.size() - 1) ? "%d" : "%d ", set.get(i));
						}
						
						////////////////////////////////////////////////////////////////
						
						break search;
					}
					
					// if neighbor unvisited then color and add to queue (neighbor.setIndex == parent.setIndex + 1)
					if(this.nodes[neighborId].getColour() == -1) {
						this.nodes[neighborId].setColour(Math.abs(next.getColour() - 1));
						this.nodes[neighborId].setIndex = next.setIndex + 1;
						queue.enqueue(this.nodes[neighborId]);
					}
				}

			}
		}
		
		if(queue.isEmpty()) {
			Collections.sort(set);
			for(int i = 0; i < set.size(); i++) {
				System.out.printf((i == set.size() - 1) ? "%d" : "%d ", set.get(i));
			}
		}
		
		
		return bipartite;
	}
	
	
	// Depth first search - sketch
	/*
	// Assume this graph is bipartite (can be coloured with two colours)
	private boolean bipartite = true;
	
	// colout_2c: check if this graph can be colored using two colors
	public void colour_2c(int traceLimit) {
		// Assume root is Node with id == 0
		Node root = this.nodes[0];
		// Start colouring with colour 0.
		root.setColour(0);
		
		for(Integer neighbor : root.getNeighborIds()) {
			colour_2c_aux(this.nodes[neighbor], root);
			if(!bipartite) {
				break;
			}
		}
	}
	
	private void colour_2c_aux(Node current, Node parent) {
		
		if(!bipartite) {
			return ;
		}
		
		if(current.getColour() == -1) {
			current.setColour(Math.abs(parent.getColour() - 1));
		}
		
		for(Integer neighbor : current.getNeighborIds()) {
			if(this.nodes[neighbor].getColour() == current.getColour()) {
				bipartite = false;
				return;
			}
			
			if(this.nodes[neighbor].getColour() == -1) {
				colour_2c_aux(this.nodes[neighbor], current);
			}
		}
	} */
	
	// colour_gr: Colour this graph using the greedy colouring algorithm.
	public void colour_gr(int traceLimit) {
		// Set maximum number of lines to trace
		if(traceLimit == -1) {
			this.traceLimit = 0;
		} else {
			this.traceLimit = traceLimit;
		}
		
		// Make list of available colours [0, num_nodes].
		int[] colours = new int[this.nodes.length];
		for(int i = 0; i < colours.length; i++) {
			colours[i] = i;
		}
		
		// Go over vertices in ascending ids and colour with least colour that does not violate the rule.
		for(Node next : this.nodes) {
			for(Integer colour : colours) {
				if(colourable(next, colour)) {
					next.setColour(colour);
					// TRACE functionality ////////////////////////
					if(this.traceLineCounter >= this.traceLimit) {
						System.out.printf("%d : %d\n", next.getId(), next.getColour());
						this.traceLineCounter++;
					} else {
                        this.traceLineCounter++;
                    }
					///////////////////////////////////////////////
					break;
				}
			}
		}
	}
	
	// colourable: Check if the Node instance node is colourable with colout colour.
	private boolean colourable(Node node, int colour) {
		// Go over neighbors and check if any have this colour.
		for(Integer neighborId : node.getNeighborIds()) {
			if(this.nodes[neighborId].getColour() == colour) {
				return false;
			}
		}
		return true;
	}
	
	// colour_ex: Find optimal colouring of this graph using exhaustive search.
	public int colour_ex(int traceLimit) {
		
		// Set maximum number of lines to trace
		if(traceLimit == -1) {
			this.traceLimit = 0;
		} else {
			this.traceLimit = traceLimit;
		}
		
		// Define and initialize an array for holding the current colouring configuration.
		char[] colourMap = new char[this.nodes.length];
		// Define initial number of colours.
		int k = 2;
		
		// TRACE functionality ///////////////////////
		if(this.traceLineCounter >= this.traceLimit) {
			System.out.printf("k = %d%n", k);
		} else {
            this.traceLineCounter++;
        }
		//////////////////////////////////////////////
		
		while(true) {
			
			// Generate all representations of digits in k-nary from that are not longer than number of nodes
			// Get maximum number in k-nary number system that can be expressed with number of places equal to number of nodes (in decimal).
			int upperLimit = getUpperLimit(k, colourMap.length);
			// Go over all number on [0, upperLimit]
			for(int i = 0; i <= upperLimit; i++) {
				
				// Getting the colour map /////////////////////
				String configuration = Integer.toString(i, k);
				
				// Pad with zeros to achieve desired length.
				int paddingLength = colourMap.length - configuration.length();
				String padStr = "";
				for(int j = 0; j < colourMap.length; j++) {
					padStr += "0";
				}
				// Convert to array. 
				configuration = padStr.substring(0, paddingLength) + configuration;
				colourMap = configuration.toCharArray();
				
				// TRACE functionality ///////////////////////
				// Print configuration.
				if(this.traceLineCounter >= this.traceLimit) {
					for(int j = 0; j < colourMap.length; j++) {
						System.out.printf("%s ", colourMap[j]);
					}
				}

				//////////////////////////////////////////////
				
				//////////////////////////////////////////////
				
				// Assign computed colour permutation to nodes in this graph.
				for(int j = 0; j < this.nodes.length; j++) {
					this.nodes[j].setColour(charToColour(colourMap[j]));
				}
				
				// Check if colour permutation if valid.
				boolean valid = isValidColouring();
				if(valid) {
					// TRACE functionality ///////////////////
					if(this.traceLineCounter >= this.traceLimit) {
						System.out.println("OK");
					} else {
                        this.traceLineCounter++;
                    }
					//////////////////////////////////////////
					return k;
				} else {
					// TRACE functionality ///////////////////
					if(this.traceLineCounter >= this.traceLimit) {
						System.out.println("NOK");
					} else {
                        this.traceLineCounter++;
                    }
					//////////////////////////////////////////
				}
			}
			// If valid configuration not found, increment k.
			k++;
			
			// TRACE functionality ///////////////////
			System.out.printf("k = %d%n", k);
			//////////////////////////////////////////
		}
	}
	
	// getUpperLimit: Get the maximum number in numSys-ary number system than can be represented with length places.
	private int getUpperLimit(int numSys, int length) {
		String num = "";
		for(int i = 0; i < length; i++) {
			num += numSys - 1;
		}
		return Integer.valueOf(num, numSys);
	}
	
	// ColorBacktracking: Color graph using the backtracking algorithm. Returns the number of colors it took to color the graph.
	public int colour_bt(int traceLimit) {
		
		// Set maximum number of lines to trace
		if(traceLimit == -1) {
			this.traceLimit = 0;
		} else {
			this.traceLimit = traceLimit;
		}
		
		// Start by trying to color graph with two colors.
		int k = 2;
		
		// TRACE functionality /////////////
		if(this.traceLineCounter >= this.traceLimit) {
			System.out.printf("k = %d\n", k);
			this.traceLineCounter++;
		}
		////////////////////////////////////
		
		// While coloring with k colors is not successful, try again with k+1 colors.
		while(!colorGraphWithK(k, 0)) {
			
			// Clear all nodes.
			this.clear();
			
			// increment maximum number of colors allowed.
			k++;
			
			// TRACE functionality //////////////////
			if(this.traceLineCounter >= this.traceLimit) {
				System.out.printf("k = %d\n", k);
			} else {
                this.traceLineCounter++;
            }
			/////////////////////////////////////////
		}
		
		// Return number of colors it took to color the graph.
		return k;
	}
	
	// colorGraph: Try to color this graph with k colors (auxiliary function for backtracking algorithm). 
	private boolean colorGraphWithK(int k, int startNodeIndex) {
		
		Node currentNode = this.nodes[startNodeIndex];
		
		for(int color = 0; color < k; color++) {
				// Color node with index startNodeIndex and 
				currentNode.setColour(color);
				
				// Check if coloring is valid.
				if(validColour(currentNode)) {
					
					// TRACE functionality ///////////////
					if(this.traceLineCounter >= this.traceLimit) {
						for(int i = 0; i <= startNodeIndex; i++) {
							System.out.printf("%d ", this.nodes[i].getColour());
						}
						System.out.println("OK");
					} else {
                        this.traceLineCounter++;
                    }
					//////////////////////////////////////
					
					// If colored last node, return true as the graph has been successfully colored.
					if(startNodeIndex == this.nodes.length - 1) {
						return true;
					}
					// else move to next Node.
					return colorGraphWithK(k, ++startNodeIndex);
					
				} else {
					// TRACE functionality /////////////////////////
					if(this.traceLineCounter >= this.traceLimit) {
						for(int i = 0; i <= startNodeIndex; i++) {
							System.out.printf("%d ", this.nodes[i].getColour());
						}
						System.out.println("NOK");
					} else {
                        this.traceLineCounter++;
                    }
					////////////////////////////////////////////////
				}
		}
		return false;
	}
	
	
	////////////////////////////////////////////////////////////////////////////////////////////
	
	// colour_dynamic: Use dynamic programming to colour this graph.
	public void colour_dynamic(int traceLimit) {

		// Set maximum number of lines to trace
		if(traceLimit == -1) {
			this.traceLimit = 0;
		} else {
			this.traceLimit = traceLimit;
		}
		
		// Generate all subsets of increasing size
		// Allocate extra array cell for storing the size of the subset
		int[][] subsets = new int[1 << this.nodes.length][this.nodes.length + 1];
		
		// Allocate memory for matrix of sorted subsets (sorted based on number of elements)
		int[][] subsetsSorted = new int[subsets.length][subsets[0].length];
		
		// store index of cell for storing the subset size.
		int setBitFieldIndex = this.nodes.length;
		// counts number of elements in subset.
		int setBitCounter;
		
		// Go over all bit combinations
		for(int i = 0; i < (1 << this.nodes.length); i++) {
			// Initialize indices and counters.
			int nodeIndex = 0;
			setBitCounter = 0;
			// Go over all elements and add elements not masked to subset.
			for(int j = 0; j < this.nodes.length; j++) {
				// If element is not masked
				if((i & (1 << j)) > 0) {
					// Add element to subset
					subsets[i][nodeIndex] = j;
					// Increment indices and counters.
					nodeIndex++;
					setBitCounter++;
				}
			}
			// Set size of subset.
			subsets[i][setBitFieldIndex] = setBitCounter;
			
			// Reset indices and counters.
			setBitCounter = 0;
			nodeIndex = 0;
		}
		
		// Go over subsets (increasing in size) (TESTED - WORKS).
		int subsetIndex = 1;
		for(int subsetSize = 1; subsetSize <= this.nodes.length; subsetSize++) {
			for(int i = 0; i < subsets.length; i++) {
				if(subsets[i][setBitFieldIndex] == subsetSize) {
					copySubset(subsets[i], subsetsSorted[subsetIndex]);
					subsetIndex++;
				}
			}
		}
		
		// Initialize array for keeping minimum numbers of colors needed to color each set.
		int[] minColors = new int[1 << this.nodes.length];
		// No colors needed to color empty set
		minColors[0] = 0;
		
		// TRACE FUNCTIONALITY ///////////////////
		if(this.traceLineCounter >= this.traceLimit ) {
			System.out.printf("{} : 0\n");
			this.traceLineCounter++;
		}
		/////////////////////////////////////////
		
		// Go over sorted subsets.
		for(int i = 1; i < subsetsSorted.length; i++) {
			
			// Get minimum number of colors needed to color next subset.
			minColors[i] = 1 + getMinDyn(subsetsSorted, subsetsSorted[i], i, minColors);
			
			// TRACE FUNCTIONALITY //////////////////////////////////////////////////
			if(this.traceLineCounter >= this.traceLimit) {
				System.out.printf("{");
				int subsetLength = subsetsSorted[i][subsetsSorted[i].length - 1];
				for(int j = 0; j < subsetLength; j++) {
					System.out.printf((j == subsetLength - 1) ? "%d}" : "%d,", subsetsSorted[i][j]);
				}
				System.out.printf(" : %d%n", minColors[i]);
			} else {
                this.traceLineCounter++;
            }
			/////////////////////////////////////////////////////////////////////////
		}
		
	}
	
	// copySubset: Copy subset src into subset dest
	private void copySubset(int[] src, int[] dest) {
		for(int i = 0; i < src.length; i++) {
			dest[i] = src[i];
		}
	}
	
	// getMinDyn: Compute the minimum number of colors needed to color a set of form S\I where I is a subset of S
	// and elements of I are independent.
	private int getMinDyn(int[][] subsets, int[] currentSet, int currentSetIndex, int[] minColors) {
		
		// Initialize minimum value;
		int min = Integer.MAX_VALUE;
		
		// Go over all I's
		for(int i = 1; i <= currentSetIndex; i++) {
			int[] nextSet = subsets[i];
			// If subset satisfies conditions for I...
			if(isSubset(nextSet, currentSet) && isIndependent(nextSet)) {
				
				// Compute next T[S\I].
				int nextVal = SminusIval(subsets, currentSet, nextSet, currentSetIndex, minColors);
				
				// If found new minimum
				if(nextVal < min) {
					min = nextVal;
				}
			}
		}
		
		return min;
	}
	
	// SminusIval: Get min number of colors needed to color set S\i
	private int SminusIval(int[][] subsets, int[] S, int[] I, int currentSetIndex, int[] minColors) {
		
		// Compute set S\I //////////////////////
		// index of element in diff
		int elIndex = 0;
		int[] diff = new int[S.length];
		
		// Go over all elements in S.
		for(int i = 0; i < S[S.length - 1]; i++) {
			// Assume next element in S is element in diff.
			boolean isEl = true;
			// Go over all elements in I
			for(int j = 0; j < I[I.length - 1]; j++) {
				// If found next element in I, then this element is not in the difference
				if(I[j] == S[i]) {
					isEl = false;
					break;
				}
			}
			// If element was not found in I add to diff.
			if(isEl) {
				diff[elIndex] = S[i];
				elIndex++;
			}
		}
		
		// Set number of elements in diff.
		diff[diff.length - 1] = elIndex;
		
		//////////////////////////////////////
		
		// Find index of set S\I in the subsets matrix.
		// Go over all subsets up to S.
		for(int i = 0; i <= currentSetIndex; i++) {
			// if diff == subsets[i] (has same elements)
			if(elementsMatch(diff, subsets[i])) {
				return minColors[i];
			}
		}
		return -1;
	}
	
	// elementsMatch: Check if set1 and set2 are the same (have same elements)
	private boolean elementsMatch(int[] set1, int[] set2) {
		
		// If sets are not same length, return false.
		if(set1[set1.length - 1] != set2[set2.length - 1]) {
			return false;
		}
		
		// Go over all elements in set1 and try to find them in set2
		for(int i = 0; i < set1[set1.length - 1]; i++) {
			// If element in set1 is not in set 2
			if(!hasElement(set2, set1[i])) {
				return false;
			}
		}
		
		return true;
	}
	
	// isSubset: Check if subsetCandidate is a subset of set
	private boolean isSubset(int[] subsetCandidate, int[] set) {
		
		// if subsetCandidate is an ampty set, it is a subset
		if(subsetCandidate[subsetCandidate.length - 1] == 0) {
			return true;
		}
		
		boolean containsEl;
		// Check if all elements of subsetCandidate are contained in set.
		for(int i = 0; i < subsetCandidate[subsetCandidate.length - 1]; i++) {
			containsEl = hasElement(set, subsetCandidate[i]);
			if(!containsEl) {
				return false;
			}
		}
		
		return true;
	}
	
	// hasElement: check if set contains element el.
	private boolean hasElement(int[] set, int el) {
		// Linear search
		for(int i = 0; i < set[set.length - 1]; i++) {
			if(set[i] == el) {
				return true;
			}
		}
		return false;
	}
	
	// isIndependet: Check if set represents an independent set (no direct connections between nodes)
	private boolean isIndependent(int[] set) {
		// Go over every element in set (each element represents a node index)
		for(int i = 0; i < set[set.length - 1]; i++) {
			int nodeIndex = set[i];
			// Go over all neighbors of next node.
			for(Integer neighborID : this.nodes[nodeIndex].getNeighborIds()) {
				// If neighborId is in this set, the set is not independent - return false.
				if(hasElement(set, neighborID)) {
					return false;
				}
			}
		}
		
		return true;
	}
	
	
	////////////////////////////////////////////////////////////////
	
	
	
	// is validColouring: check if the current coloring of this graph is valid.
	private boolean isValidColouring() {
		// Go over all nodes.
		for(Node n : this.nodes) {
			// Go over all neighbors of current node.
			for(Integer neighborId: n.getNeighborIds()) {
				// If any neighbor has the same colour, the configuration is not valid.
				if(n.getColour() == this.nodes[neighborId].getColour()) {
					return false;
				}
			}
		}
		return true;
	}
	
	// validColour: Check if any neighbors of node have the same color in this graph.
	private boolean validColour(Node node) {
		// Go over all neighbors of node
		for(Integer neighborId : node.getNeighborIds()) {
			// if neighbor has same color, return false (the coloring is not valid).
			if(this.nodes[neighborId].getColour() == node.getColour()) {
				return false;
			}
		}
		return true;
	}
	
	// charToColour: Convert number represented by character c to its decimal numeric value.
	// Supports standard numeric values 0-9 and alphabetical extensions (a == 10, b == 11, and so on.)
	private int charToColour(char c) {
		if(Character.isDigit(c)) {
			return Character.getNumericValue(c);
		}
		return (int)c - 87;
	}
}

// Node: represents a node in a graph
class Node {	
	
	// attributes (node ID)
	private int id;
	// colour == -1 -> uncoloured
	private int colour;
	private ArrayList<Edge> edges;
	private ArrayList<Integer> neighborIds;
	public int setIndex;
	
	// constructor
	public Node(int id) {
		this.id = id;
		this.colour = 0;
		this.edges = new ArrayList<Edge>();
		this.neighborIds = new ArrayList<Integer>();
		this.setIndex = 0;
	}
	
	// addEdge: add edge to this node
	public void addEdge(Edge e) {
		edges.add(e);
		// Add found neighbors to list of neighbors.
		if(e.getid1() == this.id) {neighborIds.add(e.getid2());}
		if(e.getid2() == this.id) {neighborIds.add(e.getid1());}
	}
	
	// getters and setters
	public int getId() {
		return id;
	}

	public int getColour() {
		return colour;
	}
	
	public void setColour(int colour) {
		this.colour = colour;
	}

	public ArrayList<Integer> getNeighborIds() {
		return neighborIds;
	}
	
	@Override
	public String toString() {
		return String.format("id == %d, colour == %d, Neighbors: %s", this.id, this.colour, this.neighborIds.toString());
	}
	
}

// Edge: represents edge in graph
class Edge {
	
	// IDs of start and end nodes
	private int id1;
	private int id2; 
	
	// constructor
	public Edge(int id1, int id2) {
		this.id1 = id1;
		this.id2 = id2;
	}

	// getters
	public int getid1() {
		return id1;
	}

	public int getid2() {
		return id2;
	}

}

// SimpleQeuue: A simple implementation of a queue ADT using dynamically resized arrays
class SimpleQueue<E>{
	private Object[] arr;
	
	// constructor: initialize empty queue
	public SimpleQueue() {
		this.arr = new Object[0];
	}
	
	// Enqueue add object e to this queue.
	public void enqueue(E e) {
		Object[] newArr = new Object[this.arr.length + 1];
		System.arraycopy(this.arr, 0, newArr, 0, this.arr.length);
		this.arr = newArr;
		// upcast
		this.arr[this.arr.length - 1] = (Object)e;
	}
	
	// dequeue: dequeue next object from this queue.
	@SuppressWarnings("unchecked")
	public E dequeue() {
		// Check if queue is empty.
		if(this.arr.length == 0) {
			return null;
		}
		// Get element at head
		E res = (E)this.arr[0];
		
		// Resize array
		Object[] newArr = new Object[this.arr.length - 1];
		System.arraycopy(this.arr, 1, newArr, 0, this.arr.length - 1);
		this.arr = newArr;
		
		// Return head.
		return res;
	}
	
	// isEmpty: return true if this queue is empty and false otherwise
	public boolean isEmpty() {
		return this.arr.length == 0;
	}
	
	@Override
	public String toString() {
		return String.format("next: %s", this.arr[0].toString());
	}
}
